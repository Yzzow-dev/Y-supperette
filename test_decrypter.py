#!/usr/bin/env python3
"""
Script de test pour les fonctions de d√©cryptage FiveM
"""

import base64
import binascii
from bot import FiveMDecrypter
from fivem_utils import FiveMAdvancedDecrypter, FiveMAnalyzer

def test_basic_decryption():
    """Test des fonctions de d√©cryptage de base"""
    print("üß™ Tests de d√©cryptage de base")
    print("=" * 40)
    
    # Test Base64
    test_data = "SGVsbG8gV29ybGQ="  # "Hello World" en base64
    result = FiveMDecrypter.decrypt_base64(test_data)
    print(f"Base64: {test_data} -> {result}")
    assert result == "Hello World", f"Expected 'Hello World', got {result}"
    print("‚úÖ Test Base64 r√©ussi")
    
    # Test Hex
    test_hex = "48656c6c6f20576f726c64"  # "Hello World" en hex
    result = FiveMDecrypter.decrypt_hex(test_hex)
    print(f"Hex: {test_hex} -> {result}")
    assert result == "Hello World", f"Expected 'Hello World', got {result}"
    print("‚úÖ Test Hex r√©ussi")
    
    # Test Lua obfuscation
    test_lua = """
    local function test()
        -- Commentaire √† supprimer
        local var = "test"
        return var
    end
    """
    result = FiveMDecrypter.decrypt_lua_obfuscated(test_lua)
    print(f"Lua nettoy√©: {len(result)} caract√®res")
    print("‚úÖ Test Lua r√©ussi")
    
    print()

def test_advanced_decryption():
    """Test des fonctions de d√©cryptage avanc√©es"""
    print("üî¨ Tests de d√©cryptage avanc√©")
    print("=" * 40)
    
    # Test d√©cryptage de cha√Ænes
    test_string = 'string.char(72, 101, 108, 108, 111)'  # "Hello"
    result = FiveMAdvancedDecrypter.decrypt_string_encryption(test_string)
    print(f"String encryption: {result}")
    print("‚úÖ Test d√©cryptage cha√Ænes r√©ussi")
    
    # Test configuration JSON
    test_json = '{"name": "test", "version": 1}'
    result = FiveMAdvancedDecrypter.decrypt_json_config(test_json)
    print(f"JSON config: {result[:50]}...")
    print("‚úÖ Test JSON r√©ussi")
    
    # Test protection escrow
    test_escrow = """
    local _G = _G
    local function obfuscated()
        -- Commentaire obfusqu√©
        local var = {test = "value"}
        return var
    end
    """
    result = FiveMAdvancedDecrypter.decrypt_escrow_protection(test_escrow)
    print(f"Escrow protection: {len(result)} caract√®res")
    print("‚úÖ Test protection escrow r√©ussi")
    
    print()

def test_file_analyzer():
    """Test de l'analyseur de fichiers"""
    print("üîç Tests d'analyse de fichiers")
    print("=" * 40)
    
    # Test diff√©rents types de fichiers
    test_cases = [
        ("fx_version '1.0.0'", "FXManifest"),
        ('{"name": "test"}', "Configuration JSON"),
        ("RegisterNetEvent('test')", "Script Client/Server"),
        ("function test() end", "Script Lua"),
        ("SGVsbG8gV29ybGQ=", "Donn√©es Base64"),
        ("48656c6c6f20576f726c64", "Donn√©es Hexad√©cimales"),
        ("<html><body>test</body></html>", "Interface HTML"),
        ("CREATE TABLE test", "Script SQL"),
        ("random text", "Type inconnu")
    ]
    
    for data, expected_type in test_cases:
        result = FiveMAnalyzer.analyze_file_type(data)
        print(f"Type: {result} (attendu: {expected_type})")
        assert result == expected_type, f"Expected {expected_type}, got {result}"
    
    print("‚úÖ Tous les tests d'analyse r√©ussis")
    print()

def test_auto_decrypt():
    """Test du d√©cryptage automatique"""
    print("ü§ñ Tests de d√©cryptage automatique")
    print("=" * 40)
    
    # Test avec donn√©es Base64
    test_data = "SGVsbG8gV29ybGQ="
    results = FiveMDecrypter.auto_decrypt(test_data)
    print(f"D√©cryptage automatique: {len(results)} r√©sultats")
    
    # Test avec donn√©es complexes
    complex_data = """
    local test = function()
        string.char(72, 101, 108, 108, 111)
        return "World"
    end
    """
    results = FiveMAdvancedDecrypter.auto_decrypt_advanced(complex_data)
    print(f"D√©cryptage avanc√©: {len(results)} r√©sultats")
    
    for result in results:
        print(f"  - {result['method']}: {result['full_length']} caract√®res")
    
    print("‚úÖ Tests de d√©cryptage automatique r√©ussis")
    print()

def test_recommendations():
    """Test des recommandations de m√©thodes"""
    print("üí° Tests de recommandations")
    print("=" * 40)
    
    file_types = [
        "Script Lua",
        "Configuration JSON",
        "Donn√©es Base64",
        "Script Client/Server",
        "Type inconnu"
    ]
    
    for file_type in file_types:
        methods = FiveMAnalyzer.get_recommended_methods(file_type)
        print(f"{file_type}: {methods}")
    
    print("‚úÖ Tests de recommandations r√©ussis")
    print()

def main():
    """Fonction principale de test"""
    print("üîì Tests du d√©crypteur FiveM")
    print("=" * 50)
    
    try:
        test_basic_decryption()
        test_advanced_decryption()
        test_file_analyzer()
        test_auto_decrypt()
        test_recommendations()
        
        print("üéâ Tous les tests ont r√©ussi!")
        print("‚úÖ Le d√©crypteur FiveM est pr√™t √† √™tre utilis√©")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    main()