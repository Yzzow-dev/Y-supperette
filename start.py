#!/usr/bin/env python3
"""
Script de d√©marrage pour le bot d√©crypteur FiveM
"""

import os
import sys
import subprocess
import pkg_resources
from pathlib import Path

def check_python_version():
    """V√©rifie la version de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou plus r√©cent est requis")
        print(f"Version actuelle: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")
    return True

def check_dependencies():
    """V√©rifie et installe les d√©pendances"""
    print("üîç V√©rification des d√©pendances...")
    
    requirements_file = Path("requirements.txt")
    if not requirements_file.exists():
        print("‚ùå Fichier requirements.txt manquant")
        return False
    
    try:
        # Lit les d√©pendances
        with open(requirements_file, 'r') as f:
            requirements = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        
        # V√©rifie chaque d√©pendance
        missing = []
        for req in requirements:
            try:
                pkg_resources.require(req)
                print(f"‚úÖ {req}")
            except pkg_resources.DistributionNotFound:
                missing.append(req)
                print(f"‚ùå {req} (manquant)")
            except pkg_resources.VersionConflict as e:
                print(f"‚ö†Ô∏è  {req} (conflit de version: {e})")
        
        # Installe les d√©pendances manquantes
        if missing:
            print(f"\nüì¶ Installation de {len(missing)} d√©pendances manquantes...")
            for req in missing:
                try:
                    subprocess.check_call([sys.executable, "-m", "pip", "install", req])
                    print(f"‚úÖ {req} install√©")
                except subprocess.CalledProcessError as e:
                    print(f"‚ùå Erreur lors de l'installation de {req}: {e}")
                    return False
        
        print("‚úÖ Toutes les d√©pendances sont install√©es")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des d√©pendances: {e}")
        return False

def check_env_file():
    """V√©rifie la configuration du fichier .env"""
    print("üîç V√©rification de la configuration...")
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if not env_file.exists():
        if env_example.exists():
            print("‚ö†Ô∏è  Fichier .env manquant")
            print("üìù Veuillez copier .env.example vers .env et configurer votre token Discord")
            
            # Demande si on doit cr√©er automatiquement
            response = input("Voulez-vous cr√©er le fichier .env maintenant ? (y/n): ").lower().strip()
            if response in ['y', 'yes', 'oui', 'o']:
                try:
                    # Copie le fichier exemple
                    with open(env_example, 'r') as src, open(env_file, 'w') as dst:
                        dst.write(src.read())
                    
                    print("‚úÖ Fichier .env cr√©√©")
                    print("üîë Veuillez maintenant √©diter le fichier .env et ajouter votre token Discord")
                    print("üí° Instructions: https://discord.com/developers/applications")
                    
                    return False  # Arr√™te ici pour permettre la configuration
                except Exception as e:
                    print(f"‚ùå Erreur lors de la cr√©ation du fichier .env: {e}")
                    return False
            else:
                return False
        else:
            print("‚ùå Fichiers .env et .env.example manquants")
            return False
    
    # V√©rifie le contenu du fichier .env
    try:
        with open(env_file, 'r') as f:
            content = f.read()
        
        if 'DISCORD_TOKEN=votre_token_discord_ici' in content:
            print("‚ö†Ô∏è  Token Discord non configur√© dans le fichier .env")
            print("üîë Veuillez remplacer 'votre_token_discord_ici' par votre vrai token Discord")
            return False
        
        if 'DISCORD_TOKEN=' in content:
            print("‚úÖ Configuration .env d√©tect√©e")
            return True
        else:
            print("‚ùå DISCORD_TOKEN manquant dans le fichier .env")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du fichier .env: {e}")
        return False

def start_bot():
    """D√©marre le bot"""
    print("üöÄ D√©marrage du bot d√©crypteur FiveM...")
    print("=" * 50)
    
    try:
        # Importe et lance le bot
        os.system("python bot.py")
    except KeyboardInterrupt:
        print("\nüëã Bot arr√™t√© par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage du bot: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("üîì D√©crypteur FiveM - Bot Discord")
    print("=" * 40)
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        sys.exit(1)
    
    if not check_dependencies():
        sys.exit(1)
    
    if not check_env_file():
        print("\nüí° Configuration requise avant de continuer")
        sys.exit(1)
    
    # D√©marre le bot
    print("\nüéØ Tous les pr√©requis sont satisfaits!")
    input("Appuyez sur Entr√©e pour d√©marrer le bot...")
    
    start_bot()

if __name__ == "__main__":
    main()